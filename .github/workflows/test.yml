permissions:
  contents: read
name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        go-version: [ '1.23.x', '1.22.x' ]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      shell: bash
      run: go test -v -race -coverprofile coverage.out ./...

    - name: Check test coverage
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23.x'
      shell: bash
      run: go tool cover -func=coverage.out

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build CLI
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'

    - name: Build CLI tool
      run: |
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=${GITHUB_SHA::8}
        LDFLAGS="-X main.BuildDate=$BUILD_DATE -X main.GitCommit=$GIT_COMMIT"
        go build -v -ldflags "$LDFLAGS" -o gobase-cli ./cmd/gobase

    - name: Test CLI version
      run: ./gobase-cli -version

    - name: Test CLI help
      run: ./gobase-cli || true # CLI returns non-zero for help, that's expected

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run gosec
      run: gosec ./...
