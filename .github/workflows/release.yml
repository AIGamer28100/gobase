name: Release

on:
  push:
    tags:
    - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.x'

    - name: Get version
      id: version
      run: |
        VERSION=$(grep -o 'Version.*=.*"v[^"]*"' cmd/gobase/version.go | sed 's/.*"v\([^"]*\)".*/\1/')
        echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: v$VERSION"

    - name: Run tests
      run: go test -v ./...

    - name: Build binaries
      run: |
        # Get build information
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=${GITHUB_SHA::8}
        LDFLAGS="-X main.BuildDate=$BUILD_DATE -X main.GitCommit=$GIT_COMMIT"

        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o gobase-linux-amd64 ./cmd/gobase
        GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o gobase-linux-arm64 ./cmd/gobase
        GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o gobase-windows-amd64.exe ./cmd/gobase
        GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o gobase-darwin-amd64 ./cmd/gobase
        GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o gobase-darwin-arm64 ./cmd/gobase

    - name: Generate Release Notes
      id: release_notes
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Get previous tag for comparison
        PREV_TAG=$(git describe --tags --abbrev=0 ${TAG_NAME}^ 2>/dev/null || echo "")
        
        # Create release notes
        echo "## üöÄ Release $TAG_NAME" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### üìã Changes since $PREV_TAG:" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commit messages between tags
          git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> release_notes.md
          
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${TAG_NAME}" >> release_notes.md
        else
          echo "### üéâ Initial Release" >> release_notes.md
          echo "" >> release_notes.md
          echo "This is the first release of gobase - a Django-inspired ORM library for Go." >> release_notes.md
          echo "" >> release_notes.md
          echo "#### ‚ú® Features:" >> release_notes.md
          echo "- Multi-database support (SQLite, MySQL, PostgreSQL)" >> release_notes.md
          echo "- Django-style ORM with familiar query syntax" >> release_notes.md
          echo "- CLI tool for database management" >> release_notes.md
          echo "- User management with authentication" >> release_notes.md
          echo "- Cross-platform binaries" >> release_notes.md
        fi
        
        # Set output for use in next step
        {
          echo 'RELEASE_NOTES<<EOF'
          cat release_notes.md
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          gobase-linux-amd64
          gobase-linux-arm64
          gobase-windows-amd64.exe
          gobase-darwin-amd64
          gobase-darwin-arm64
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

    - name: Trigger pkg.go.dev
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        MODULE_PATH="github.com/${{ github.repository }}"
        
        echo "üîÑ Triggering pkg.go.dev to fetch $MODULE_PATH@$TAG_NAME"
        
        # Trigger pkg.go.dev to fetch the new version
        curl -X POST "https://pkg.go.dev/fetch/$MODULE_PATH@$TAG_NAME" \
          -H "User-Agent: GitHub-Actions-Release-Bot/1.0" \
          -w "HTTP Status: %{http_code}\n" \
          || echo "‚ö†Ô∏è  pkg.go.dev fetch request failed, but release was successful"
        
        echo "‚úÖ Release $TAG_NAME completed and pkg.go.dev has been notified"
